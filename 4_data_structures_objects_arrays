****DATA STRUCTURES: OBJECTS AND ARRAYS****


**THE SUM OF A RANGE**

function range (start, end, index) {
  const arr = [];
  if (index == undefined) {
    for (let i = start; i <= end; i++) {
    arr.push(i);
    }
  } else {
    for (let i = start;i >= end; i += index)
    {arr.push(i);}
  }
  return arr;
}


function sum (arr) {
    
    return arr.reduce(function (tot, acc) {return tot + acc;});}


**REVERSING AN ARRAY**

function reverseArray(arr) {
  let rArray = [];
  for (i = arr.length-1; i >= 0; i--) {
   rArray.push(arr[i]);
  }
  return rArray;
}

function reverseArrayInPlace(arr) {
  let indexA, indexB = "";
  for (i = 0; i < (Math.floor(arr.length/2) - 1); i++) {
    indexA = arr[i];
    arr[i] = arr[(arr.length - (i + 1))];
    arr[(arr.length - (i + 1))] = indexA;  
  }

  return arr;
}


**A LIST**

function arrayToList (arr) {
  let list = null;
  for (i = arr.length - 1; i >= 0; i--) {
    list = {value: arr[i], rest: list};
  }
  return list;
}

function listToArray (list) {
  let arr = [];
  for (let i = list; i; i = i.rest) {
       arr.push(i.value);
       }
  return arr;
}

function prepend (initVal, list) {
  return {value: initVal, rest: list};
}

function nth (list, index) {
  // if index doesnt exist, return undefined
  if (!list) {return undefined;}
  // if this is the node, return it.
  else if (index == 0) {return list.value;} 
  // else recursion
  else return nth(list.rest, index - 1);
}

console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20
