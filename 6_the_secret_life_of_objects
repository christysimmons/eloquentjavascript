****The Secret Life of Objects****

**A Vector Tyoe**

class Vec {
  constructor(x,y) {
  this.x = x;
  this.y = y
  }
  
  plus(v) {
    return new Vec((this.x + v.x),(this.y + v.y));
  }
  
  minus(v) {
    return new Vec((this.x - v.x),(this.y - v.y));
  }
  
  get length() {
      return Math.sqrt((this.x**2 + this.y**2));
  }
}

**Groups**

class Group {
  constructor() {
    this.arr = [];
  }
  
  add(n) {
    if (this.arr.indexOf(n) === -1) {
      this.arr.push(n);
    } else {return `${n} is already here`;} 
  }
  
  delete(n) {
    if (this.arr.indexOf(n) !== -1) {
      this.arr = this.arr.filter(elem => elem !== n); 
    } else {return `${n} is not here`;}    
  }
  
  has(n) { 
    if (this.arr.indexOf(n) !== -1) {
      return this.arr.indexOf(n);
    } else {return `${n} is not here`;}  
  }
  
  static from(iter) {
    let group = new Group;
    for (let val of iter) {
      group.add(val);
    }
    return group;
  }
}


**Iterable Groups**

class Group {
  constructor() {
    this.arr = [];
  }
  
  add(n) {
    if (this.arr.indexOf(n) === -1) {
      this.arr.push(n);
    } else {return `${n} is already here`;} 
  }
  
  delete(n) {
    if (this.arr.indexOf(n) !== -1) {
      this.arr = this.arr.filter(elem => elem !== n); 
    } else {return `${n} is not here`;}   
  }
  
  has(n) { 
    if (this.arr.indexOf(n) !== -1) {
      return this.arr.indexOf(n);
    } else {return `${n} is not here`;}
    
  }
  
  static from(iter) {
    let group = new Group;
    for (let val of iter) {
      group.add(val);
    }
    return group;
  }
  
  [Symbol.iterator]() {
    return new GroupIterator(this);
  }
}

class GroupIterator {
  constructor(group) {
    this.group = group;
    this.pos = 0;
  }
  
  next() {
    if (this.pos >= this.group.arr.length) {
      return {done: true};
    } else {
      let result = {value: this.group.arr[this.pos], 
                   done: false};
      this.pos++;
      return result;
    }
  }
}

**Borrowing A Method**

let map = {one: true, two: true, hasOwnProperty: true};

// Fix this call
console.log(Object.prototype.hasOwnProperty.call(map, "one"));
// â†’ true
